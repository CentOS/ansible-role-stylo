# Functions

usage() {
cat << EOF
You need to call the script like this : $0 -arguments
 -t : koji tag to parse [required, example: storage7-gluster-7-testing]
 -r : Force a call to koji dist-repo to regen repository for tag [optional, default: depends if unsigned pkgs are found]
 -h : display this help
EOF

}

varcheck() {
if [ -z "$1" ] ; then
        usage
        exit 1
fi
}


f_log() {
   echo "[+] $(date +%Y%m%d-%H:%M) stylo -> $*" >>$logfile
}

f_check() {
  if [ "$?" -ne "0" ] ;then
    f_log "ERROR, exiting .. check log"
    if [ "$zabbix_send" = true ] ;then
      zabbix_sender -c /etc/zabbix/zabbix_agentd.conf -k stylo.signing.status -o 1 >/dev/null
    fi
    exit 1
  fi
}

f_mqtt_pub() {
  tag="$1"
  status="$2"
  queued_jobs=$(echo -e "stats-tube signing\r\n"|nc 127.0.0.1 11300|grep current-jobs-ready|awk '{print $2}')
  current_time=$(date '+%Y%m%d-%H:%M:%S')
  mqtt_payload="{\"time\": \"${current_time}\", \"tag\": \"${tag}\", \"status\": \"${status}\", \"jobs_in_queue\": \"${queued_jobs}\"}"
  mosquitto_pub --cafile ${mqtt_ca_cert} --cert ${mqtt_tls_cert} --key ${mqtt_tls_key} -h ${mqtt_host} -p ${mqtt_port} -t ${mqtt_topic_pub} -m "${mqtt_payload}"
}

# this function will only be triggered for kmods SIG
# it will be called after rpms will be signed and imported back into koji
# and after dist-repo task, to have repodata/Packages in place
# we'll just verify if for each kmod-*.rpm we have a .iso file and if not generate it

f_gendud() {
  
  f_log "Building DuD images for tag [${dist_repo_koji_tag}]"
  for arch in ${tag_arches} ; do
    if [ -d "${repo_dist_dir}/${dist_repo_koji_tag}/latest/${arch}/Packages/k/" ] ; then
      pushd ${repo_dist_dir}/${dist_repo_koji_tag}/latest/${arch}/Packages/k/ >/dev/null
      kmod_pkgs_number=$(find ./ -iname 'kmod*.rpm'|wc -l)
      if [ "${kmod_pkgs_number}" -gt "0" ] ; then
        test -d ../../DriverDiscs || mkdir -p ../../DriverDiscs/
        for rpm_pkg in *.rpm ; do
          iso_filename="${rpm_pkg/.rpm/.iso}"
          f_log "Testing if we have [${iso_filename}]"
          if [ -e "../../DriverDiscs/${iso_filename}" ]; then
            f_log "[${iso_filename}] already present"
          else
            f_log "Building DuD [${iso_filename}]"
            tmp_dir="$(mktemp -d)"
            pushd ${tmp_dir} >/dev/null
              mkdir -p {./dd/rpms/${arch}/,./dd/src}
              echo -e "Driver Update Disk version 3\c" > ./dd/rhdd3
              pushd dd/rpms/${arch} >/dev/null
              cp ${repo_dist_dir}/${dist_repo_koji_tag}/latest/${arch}/Packages/k/${rpm_pkg} ./
              createrepo_c --quiet ./
              popd >/dev/null
              mkisofs -quiet -lR -V OEMDRV -input-charset utf8 -o ${iso_filename} ./dd
              cp ${iso_filename} ${repo_dist_dir}/${dist_repo_koji_tag}/latest/${arch}/DriverDiscs/
            popd > /dev/null
            rm -Rf ${tmp_dir}
          fi
        done
        popd > /dev/null
      fi
    fi
  done
  f_log "Finished building DuD iso images for tag [${dist_repo_koji_tag}]"
}

# Specific function for kmods SIG 
# kernel modules are built against specific kernel and src.rpm for corresponding kernels should go out too
# As we allow building against/for RHEL kernels, we should then release these ones too (RH Legal)
f_kernel_src() {
  f_log "Starting kernel_src function for Kmods SIG"
  if [ "$dist" == "9" ] ; then
    kernel_src_vault_dir="${target_dir}/${dist}/${sig}/source/kernels/"  
  elif [ "$dist" == "8" ] ; then
    kernel_src_vault_dir="${vault_basedir}/${contentdir}/${dist}/${sig}/Source/kernels/"
  else
    f_log "Detected dist is [${dist}] so src.rpm kernels are available so nothing to download from RH CDN"
    return 0  
  fi
  # Clearing first local dnf cache
  dnf --quiet clean all --disablerepo=\* --enablerepo=rhel-${dist}-for-x86_64-baseos-srpms
  # Ensuring we have target dir to push to
  ssh ${push_user}@${master} "test -d ${kernel_src_vault_dir}/ || mkdir -p ${kernel_src_vault_dir}"
  f_log "Retrieving already downloaded kernel src.rpm packages"
  existing_kernels=$(ssh ${push_user}@${master} "ls ${kernel_src_vault_dir}/kernel*.src.rpm")
  # Checking kmods src.rpm and for each one, checking kernel version and if we have kernel src.rpm
  kernels_stg_dir=$(mktemp -d --tmpdir=/home/stylo/staging)
  pushd ${kernels_stg_dir} >/dev/null 2>&1
  for kmod_srpm in $(find ${repo_dist_dir}/${dist_repo_koji_tag}/latest/src/ -iname kmod*.src.rpm) ; do
    kernel_version=$(rpm -qp --queryformat '%{V}' ${kmod_srpm} 2>/dev/null|sed 's/~/-/g')
    # searching if we already have kernel-${kernel_version}
    kmod_srpm_pkg=$(echo ${kmod_srpm} | rev | cut -f 1 -d '/' | rev)
    if grep -q ${kernel_version} <<< "${existing_kernels}"; then
      f_log "[${kmod_srpm_pkg}] : matching [kernel-${kernel_version}] src.rpm already available => SKIP"
    else
      f_log "[${kmod_srpm_pkg}] : Downloading [kernel-${kernel_version}] from [rhel-${dist}-for-x86_64-baseos-srpms]"
      yumdownloader --quiet --source --disablerepo=\* --enablerepo=rhel-${dist}-for-x86_64-baseos-srpms kernel-${kernel_version}\*
      f_check
    fi 
  done
  popd >/dev/null 2>&1
  # Pushing all downloaded src.rpm packages to target dir (rsync *without* --delete)
  f_log "Pushing EL${dist} kernel src.rpm packages to ${kernel_src_vault_dir}/"
  rsync -av ${kernels_stg_dir}/ ${push_user}@${master}:/${kernel_src_vault_dir}/ >> ${logfile}
  f_check
  ssh ${push_user}@${master} "cd ${kernel_src_vault_dir} ; createrepo_c -q -d --workers 8 ./ ; chmod 755 ${kernel_src_vault_dir}" 
  f_check
  rm -Rf ${kernels_stg_dir} 
}

# Next function is to just retrieve from koji images/spins and just push out and sign checksum
# no rpm package to sign so we'll just exit after having pushed artifacts to mirror cdn

f_process_images() {
  f_log "[images] detected so not signing rpm packages"
  tagged_images=$(cbs list-tagged --quiet ${koji_tag} --paths|wc -l)
  if [ "${tagged_images}" -eq "0" ] ; then
    f_log "[WARNING] No tagged image/spin in tag [${koji_tag}]"
    f_log "Exiting"
  else
    # we seem to have artifacts so detecting architectures, creating tmp dir, copying all , signing artifacts and sync out
    f_log "Parsing tagged builds for tag [${koji_tag}]"
    images_stg_dir=$(mktemp -d --tmpdir=/home/stylo/staging)
    tag_arches=$(cbs taginfo ${koji_tag}|grep Arches|cut -f 2 -d ':'|sed 's/armv7hl/armhfp/g')
    f_log "Enabled architectures for tag [${koji_tag}] : [${tag_arches} ]"
    # Checking where to push images to 
    if [ "$dist" == "9-stream" ] || [ "$dist" == "9" ] ; then
      full_mirror_dir="${target_dir}/${dist}/${sig}/${sig_project}/${sig_project_rel}"
    else
      full_mirror_dir="${target_dir}/centos/${dist}/${sig}/${sig_project}/${sig_project_rel}"
    fi
    for arch in ${tag_arches}; do
      test -d ${images_stg_dir}/${arch} || mkdir -p ${images_stg_dir}/${arch}
      for path in $(cbs list-tagged --quiet --paths ${koji_tag}|awk '{print $1}') ; do
	f_log "Copying artifacts from ${path}/ to staging dir for arch [${arch}]"
        # ${images_artifacts} variable is defined through stylo.cfg, sourced for this script (and configured by ansible)
	for artifact in ${images_artifacts} ; do
	  find ${path}/images/ -iname *${arch}*.${artifact} -exec cp -v {} ${images_stg_dir}/${arch} \; >> ${logfile}
	  f_check
	done
      done
      f_log "Creating and signing SHA256SUM for all [${arch}] images"
      pushd ${images_stg_dir}/${arch} > /dev/null
      cat *.sha256 > SHA256SUM && rm *.sha256
      gpg --batch --detach-sig --armor -b --digest-algo sha256 --use-agent --local-user ${sig_key}! SHA256SUM
      f_check
      popd > /dev/null
      f_log "Testing target dir [${full_mirror_dir}]/${arch} exists"
      ssh ${push_user}@${master} "test -d ${full_mirror_dir}/${arch} || mkdir -p ${full_mirror_dir}/${arch}"
      f_log "Pushing [${images_stg_dir}/${arch}/] to [${full_mirror_dir}/${arch}]"
      rsync -avH --delete-after ${images_stg_dir}/${arch}/ ${push_user}@${master}:/${full_mirror_dir}/${arch}/ >> ${logfile}
      f_check
      f_log "Deleting staged dir [${images_stg_dir}/${arch}]"
      rm -Rf ${images_stg_dir}/${arch}
    done
    f_log "Deleting staged directory [${images_stg_dir}]"
    rm -Rf ${images_stg_dir}
  fi
  f_mqtt_pub "${koji_tag}" "processed"
  f_log "Finished parsing images artifacts for [${koji_tag}]"
  f_log "=================================================================================="
  exit
}
